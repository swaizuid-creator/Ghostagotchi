import type { SignMessageData } from "@solana/actions-spec";
export interface SignMessageVerificationOptions {
    expectedAddress?: string;
    expectedDomains?: string[];
    expectedChainIds?: string[];
    issuedAtThreshold?: number;
}
export declare enum SignMessageVerificationErrorType {
    ADDRESS_MISMATCH = "ADDRESS_MISMATCH",
    DOMAIN_MISMATCH = "DOMAIN_MISMATCH",
    CHAIN_ID_MISMATCH = "CHAIN_ID_MISMATCH",
    ISSUED_TOO_FAR_IN_THE_PAST = "ISSUED_TOO_FAR_IN_THE_PAST",
    ISSUED_TOO_FAR_IN_THE_FUTURE = "ISSUED_TOO_FAR_IN_THE_FUTURE",
    INVALID_DATA = "INVALID_DATA"
}
/**
 * Create a human-readable message text for the user to sign.
 *
 * @param input The data to be signed.
 * @returns The message text.
 */
export declare function createSignMessageText(input: SignMessageData): string;
/**
 * Parse the sign message text to extract the data to be signed.
 * @param text The message text to be parsed.
 */
export declare function parseSignMessageText(text: string): SignMessageData | null;
/**
 * Verify the sign message data before signing.
 * @param data The data to be signed.
 * @param opts Options for verification, including the expected address, chainId, issuedAt, and domains.
 *
 * @returns An array of errors if the verification fails.
 */
export declare function verifySignMessageData(data: SignMessageData, opts: SignMessageVerificationOptions): SignMessageVerificationErrorType[];
//# sourceMappingURL=signMessageData.d.ts.map